// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using back_end;

namespace back_end.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220813234650_add-colunm-poster-tipo-servicio")]
    partial class addcolunmpostertiposervicio
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("back_end.Entidades.Paquete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Paquetes");
                });

            modelBuilder.Entity("back_end.Entidades.PaquetesServicios", b =>
                {
                    b.Property<int>("PaqueteId")
                        .HasColumnType("int");

                    b.Property<int>("ServicioId")
                        .HasColumnType("int");

                    b.HasKey("PaqueteId", "ServicioId");

                    b.HasIndex("ServicioId");

                    b.ToTable("PaquetesServicios");
                });

            modelBuilder.Entity("back_end.Entidades.PaquetesSucursales", b =>
                {
                    b.Property<int>("PaqueteId")
                        .HasColumnType("int");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.HasKey("PaqueteId", "SucursalId");

                    b.HasIndex("SucursalId");

                    b.ToTable("PaquetesSucursales");
                });

            modelBuilder.Entity("back_end.Entidades.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TipoServicioId")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("TipoServicioId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("back_end.Entidades.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Point>("Ubicacion")
                        .HasColumnType("geography");

                    b.HasKey("Id");

                    b.ToTable("Sucursales");
                });

            modelBuilder.Entity("back_end.Entidades.TipoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoServicios");
                });

            modelBuilder.Entity("back_end.Entidades.PaquetesServicios", b =>
                {
                    b.HasOne("back_end.Entidades.Paquete", "Paquete")
                        .WithMany("PaquetesServicios")
                        .HasForeignKey("PaqueteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Entidades.Servicio", "Servicio")
                        .WithMany("PaquetesServicios")
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paquete");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("back_end.Entidades.PaquetesSucursales", b =>
                {
                    b.HasOne("back_end.Entidades.Paquete", "Paquete")
                        .WithMany("PaquetesSucursales")
                        .HasForeignKey("PaqueteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Entidades.Sucursal", "Sucursal")
                        .WithMany("PaquetesSucursales")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paquete");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("back_end.Entidades.Servicio", b =>
                {
                    b.HasOne("back_end.Entidades.TipoServicio", "TipoServicio")
                        .WithMany("Servicios")
                        .HasForeignKey("TipoServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoServicio");
                });

            modelBuilder.Entity("back_end.Entidades.Paquete", b =>
                {
                    b.Navigation("PaquetesServicios");

                    b.Navigation("PaquetesSucursales");
                });

            modelBuilder.Entity("back_end.Entidades.Servicio", b =>
                {
                    b.Navigation("PaquetesServicios");
                });

            modelBuilder.Entity("back_end.Entidades.Sucursal", b =>
                {
                    b.Navigation("PaquetesSucursales");
                });

            modelBuilder.Entity("back_end.Entidades.TipoServicio", b =>
                {
                    b.Navigation("Servicios");
                });
#pragma warning restore 612, 618
        }
    }
}
